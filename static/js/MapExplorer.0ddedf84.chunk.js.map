{"version":3,"sources":["components/mapexplorer.js"],"names":["lazy","React","memo","stateCode","data","regionHighlighted","setRegionHighlighted","anchor","mapStatistic","setAnchor","setMapStatistic","isCountryLoaded","useTranslation","t","useHistory","useRef","useState","code","view","MAP_VIEWS","DISTRICTS","option","MAP_META","mapType","MAP_TYPES","COUNTRY","MAP_OPTIONS","HOTSPOTS","TOTAL","currentMap","setCurrentMap","currentMapMeta","useEffect","districtName","PER_MILLION","STATE","ZONES","STATES","switchMap","useCallback","newMapMeta","districts","topDistrict","Object","keys","sort","a","b","getStatistic","ReactDOM","unstable_batchedUpdates","panelState","useMemo","stateData","produce","draft","state","STATE_NAMES","hoveredData","name","population_millions","STATE_POPULATIONS_MIL","useSprings","MAP_STATISTICS","length","map","statistic","total","delta","from","config","tension","clamp","className","classnames","stickied","hidden","prevProps","currProps","equal","TT","meta"],"mappings":"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","file":"static/js/MapExplorer.0ddedf84.chunk.js","sourcesContent":["import MapVisualizerLoader from './loaders/mapvisualizer';\n\nimport {\n  MAP_META,\n  MAP_OPTIONS,\n  MAP_STATISTICS,\n  MAP_TYPES,\n  MAP_VIEWS,\n  STATE_NAMES,\n  STATE_POPULATIONS_MIL,\n  UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport {\n  capitalize,\n  formatNumber,\n  formatDate,\n  formatLastUpdated,\n  getStatistic,\n} from '../utils/commonfunctions';\n\nimport {PinIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  Suspense,\n  lazy,\n} from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {useSprings, animated} from 'react-spring';\n\nconst MapVisualizer = lazy(() =>\n  import('./mapvisualizer' /* webpackChunkName: \"MapVisualizer\" */)\n);\n\nfunction MapExplorer({\n  stateCode,\n  data,\n  regionHighlighted,\n  setRegionHighlighted,\n  anchor,\n  setAnchor,\n  mapStatistic,\n  setMapStatistic,\n  isCountryLoaded = true,\n}) {\n  const {t} = useTranslation();\n  const history = useHistory();\n\n  const mapExplorerRef = useRef();\n\n  const [currentMap, setCurrentMap] = useState({\n    code: stateCode,\n    view: MAP_VIEWS.DISTRICTS,\n    option:\n      MAP_META[stateCode].mapType === MAP_TYPES.COUNTRY\n        ? MAP_OPTIONS.HOTSPOTS\n        : MAP_OPTIONS.TOTAL,\n  });\n  const currentMapMeta = MAP_META[currentMap.code];\n\n  const currentMapData =\n    currentMapMeta.mapType === MAP_TYPES.COUNTRY\n      ? data\n      : {[currentMap.code]: data[currentMap.code]};\n\n  useEffect(() => {\n    if (regionHighlighted.districtName) {\n      if (\n        currentMap.code !== regionHighlighted.stateCode &&\n        !(\n          currentMapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.view === MAP_VIEWS.DISTRICTS\n        )\n      ) {\n        const newMapMeta = MAP_META[regionHighlighted.stateCode];\n        if (!newMapMeta) {\n          return;\n        }\n        setCurrentMap({\n          code: regionHighlighted.stateCode,\n          view: MAP_VIEWS.DISTRICTS,\n          option:\n            currentMap.option === MAP_OPTIONS.PER_MILLION\n              ? MAP_OPTIONS.TOTAL\n              : currentMap.option,\n        });\n      }\n    } else if (isCountryLoaded && currentMapMeta.mapType === MAP_TYPES.STATE) {\n      setCurrentMap({\n        code: 'TT',\n        view:\n          currentMap.option === MAP_OPTIONS.ZONES\n            ? MAP_VIEWS.DISTRICTS\n            : MAP_VIEWS.STATES,\n        option: currentMap.option,\n      });\n    }\n  }, [\n    isCountryLoaded,\n    regionHighlighted.stateCode,\n    regionHighlighted.districtName,\n    currentMap.code,\n    currentMap.option,\n    currentMap.view,\n    currentMapMeta.mapType,\n  ]);\n\n  const switchMap = useCallback(\n    (stateCode) => {\n      const newMapMeta = MAP_META[stateCode];\n      if (!newMapMeta) {\n        return;\n      }\n      if (newMapMeta.mapType === MAP_TYPES.STATE) {\n        const districts = data[stateCode].districts || {};\n        const topDistrict = Object.keys(districts).sort(\n          (a, b) =>\n            getStatistic(districts[b], 'total', mapStatistic) -\n            getStatistic(districts[a], 'total', mapStatistic)\n        )[0];\n        ReactDOM.unstable_batchedUpdates(() => {\n          setRegionHighlighted({\n            stateCode: stateCode,\n            districtName: topDistrict,\n          });\n          setCurrentMap({\n            code: stateCode,\n            view: MAP_VIEWS.DISTRICTS,\n            option:\n              currentMap.option === MAP_OPTIONS.PER_MILLION\n                ? MAP_OPTIONS.TOTAL\n                : currentMap.option,\n          });\n        });\n      } else {\n        ReactDOM.unstable_batchedUpdates(() => {\n          setCurrentMap({\n            code: 'TT',\n            view:\n              currentMap.option === MAP_OPTIONS.HOTSPOTS\n                ? MAP_VIEWS.DISTRICTS\n                : MAP_VIEWS.STATES,\n            option: currentMap.option,\n          });\n          setRegionHighlighted({\n            stateCode: 'TT',\n            districtName: null,\n          });\n        });\n      }\n    },\n    [data, currentMap.option, mapStatistic, setRegionHighlighted]\n  );\n\n  useEffect(() => {\n    switchMap(stateCode);\n  }, [stateCode, switchMap]);\n\n  const panelState = useMemo(() => {\n    const stateCode =\n      currentMap.view === MAP_VIEWS.STATES\n        ? regionHighlighted.stateCode\n        : currentMap.code;\n    const stateData = data[stateCode] || {};\n    return produce(stateData, (draft) => {\n      draft.state = STATE_NAMES[stateCode];\n    });\n  }, [data, regionHighlighted.stateCode, currentMap.view, currentMap.code]);\n\n  const hoveredRegion = useMemo(() => {\n    const hoveredData =\n      (regionHighlighted.districtName\n        ? data[regionHighlighted.stateCode]?.districts?.[\n            regionHighlighted.districtName\n          ]\n        : data[regionHighlighted.stateCode]) || {};\n    return produce(hoveredData, (draft) => {\n      draft.name =\n        regionHighlighted.districtName ||\n        STATE_NAMES[regionHighlighted.stateCode];\n      if (!regionHighlighted.districtName)\n        draft.population_millions =\n          STATE_POPULATIONS_MIL[regionHighlighted.stateCode];\n    });\n  }, [data, regionHighlighted.stateCode, regionHighlighted.districtName]);\n\n  const handleTabClick = (option) => {\n    switch (option) {\n      case MAP_OPTIONS.TOTAL:\n        setCurrentMap({\n          code: currentMap.code,\n          view:\n            currentMapMeta.mapType === MAP_TYPES.COUNTRY\n              ? MAP_VIEWS.STATES\n              : MAP_VIEWS.DISTRICTS,\n          option: MAP_OPTIONS.TOTAL,\n        });\n        if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n          setRegionHighlighted({\n            stateCode: regionHighlighted.stateCode,\n            districtName: null,\n          });\n        return;\n      case MAP_OPTIONS.PER_MILLION:\n        if (currentMapMeta.mapType === MAP_TYPES.STATE) return;\n        setCurrentMap({\n          code: currentMap.code,\n          view: MAP_VIEWS.STATES,\n          option: MAP_OPTIONS.PER_MILLION,\n        });\n        setRegionHighlighted({\n          stateCode: regionHighlighted.stateCode,\n          districtName: null,\n        });\n        return;\n      case MAP_OPTIONS.HOTSPOTS:\n        setCurrentMap({\n          code: currentMap.code,\n          view: MAP_VIEWS.DISTRICTS,\n          option: MAP_OPTIONS.HOTSPOTS,\n        });\n        return;\n      case MAP_OPTIONS.ZONES:\n        setCurrentMap({\n          code: currentMap.code,\n          view: MAP_VIEWS.DISTRICTS,\n          option: MAP_OPTIONS.ZONES,\n        });\n        if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n          setRegionHighlighted({\n            stateCode: 'TT',\n            districtName: null,\n          });\n        return;\n      default:\n        return;\n    }\n  };\n\n  const springs = useSprings(\n    MAP_STATISTICS.length,\n    MAP_STATISTICS.map((statistic) => ({\n      total: getStatistic(panelState, 'total', statistic),\n      delta: getStatistic(panelState, 'delta', statistic),\n      from: {\n        total: getStatistic(panelState, 'total', statistic),\n        delta: getStatistic(panelState, 'delta', statistic),\n      },\n      config: {\n        tension: 500,\n        clamp: true,\n      },\n    }))\n  );\n\n  return (\n    <div\n      className={classnames(\n        'MapExplorer',\n        {stickied: anchor === 'mapexplorer'},\n        {hidden: anchor && anchor !== 'mapexplorer'}\n      )}\n    >\n{/*\n      {window.innerWidth > 769 && (\n        <div\n          className={classnames('anchor', {stickied: anchor === 'mapexplorer'})}\n          onClick={() => {\n            setAnchor(anchor === 'mapexplorer' ? null : 'mapexplorer');\n          }}\n        >\n          <PinIcon />\n        </div>\n      )}\n\n      <div className=\"header\">\n        <h1>\n          {currentMap.code === 'TT'\n            ? t('India')\n            : t(STATE_NAMES[currentMap.code])}{' '}\n          {t('Map')}\n        </h1>\n        <h6>\n          {t('{{action}} over a {{mapType}} for more details', {\n            action: t(window.innerWidth <= 769 ? 'Tap' : 'Hover'),\n            mapType: t(\n              currentMapMeta.mapType === MAP_TYPES.COUNTRY\n                ? 'state/UT'\n                : 'District'\n            ),\n          })}\n        </h6>\n      </div>\n\n      <div className=\"map-stats\">\n        {MAP_STATISTICS.map((statistic, index) => (\n          <div\n            key={statistic}\n            className={classnames('stats', statistic, {\n              focused: statistic === mapStatistic,\n            })}\n            onClick={() => setMapStatistic(statistic)}\n          >\n            <h5>{t(capitalize(statistic))}</h5>\n            <div className=\"stats-bottom\">\n              <animated.h1>\n                {springs[index].total.interpolate((total) =>\n                  formatNumber(Math.floor(total))\n                )}\n              </animated.h1>\n              {statistic !== 'tested' && statistic !== 'active' && (\n                <animated.h6>\n                  {springs[index].delta.interpolate((delta) =>\n                    delta > 0 ? `+${formatNumber(Math.floor(delta))}` : '\\u00A0'\n                  )}\n                </animated.h6>\n              )}\n              {statistic === 'tested' && (\n                <h6>\n                  {panelState?.total?.tested &&\n                    t('As of {{date}}', {\n                      date: formatDate(\n                        panelState.meta.tested['last_updated'],\n                        'dd MMM'\n                      ),\n                    })}\n                </h6>\n              )}\n            </div>\n            {statistic === 'tested' && panelState?.total?.tested && (\n              <a href={panelState.meta.tested.source} target=\"_noblank\">\n                <Icon.Link />\n              </a>\n            )}\n          </div>\n        ))}\n      </div>\n\n\n      <div className=\"meta\">\n        {currentMapMeta.mapType === MAP_TYPES.STATE && (\n          <div\n            className=\"map-button\"\n            onClick={() => history.push(`state/${currentMap.code}`)}\n          >\n            {t('Visit state page')}\n            <Icon.ArrowRightCircle />\n          </div>\n        )}\n\n        {currentMapMeta.mapType !== MAP_TYPES.STATE &&\n          panelState?.meta?.['last_updated'] && (\n            <div className=\"last-update\">\n              <h6>{t('Last updated')}</h6>\n              <h3>\n                {`${formatLastUpdated(panelState.meta['last_updated'])} ${t(\n                  'ago'\n                )}`}\n              </h3>\n            </div>\n          )}\n\n        <h2\n          className={classnames(mapStatistic, {\n            [hoveredRegion?.zone]: currentMap.option === MAP_OPTIONS.ZONES,\n          })}\n        >\n          {t(hoveredRegion.name)}\n          {hoveredRegion.name === UNKNOWN_DISTRICT_KEY &&\n            ` (${t(STATE_NAMES[regionHighlighted.stateCode])})`}\n        </h2>\n\n        {currentMapMeta.mapType === MAP_TYPES.STATE && (\n          <div className=\"map-button\" onClick={() => switchMap('TT')}>\n            {t('Back')}\n          </div>\n        )}\n\n        {currentMap.option !== MAP_OPTIONS.ZONES &&\n          ((currentMap.view === MAP_VIEWS.DISTRICTS &&\n            regionHighlighted.districtName) ||\n            (currentMap.view === MAP_VIEWS.STATES &&\n              currentMap.option !== MAP_OPTIONS.TOTAL)) && (\n            <h1 className={classnames('district', mapStatistic)}>\n              {formatNumber(\n                getStatistic(\n                  hoveredRegion,\n                  'total',\n                  mapStatistic,\n                  currentMap.option === MAP_OPTIONS.PER_MILLION\n                    ? hoveredRegion.population_millions\n                    : 1\n                )\n              )}\n              <br />\n              <span>\n                {t(mapStatistic)}\n                {currentMap.option === MAP_OPTIONS.PER_MILLION &&\n                  ` ${t('per million')}`}\n              </span>\n            </h1>\n          )}\n      </div>\n\n      <div ref={mapExplorerRef}>\n        {mapStatistic && (\n          <Suspense\n            fallback={\n              <MapVisualizerLoader\n                className=\"map-loader\"\n                {...{\n                  width: mapExplorerRef.current?.clientWidth,\n                  statistic: mapStatistic,\n                }}\n              />\n            }\n          >\n            <MapVisualizer\n              currentMap={currentMap}\n              data={currentMapData}\n              changeMap={switchMap}\n              regionHighlighted={regionHighlighted}\n              setRegionHighlighted={setRegionHighlighted}\n              statistic={mapStatistic}\n              isCountryLoaded={isCountryLoaded}\n            />\n          </Suspense>\n        )}\n      </div>\n\n      <div className=\"tabs-map\">\n        {Object.values(MAP_OPTIONS).map((option) => (\n          <div\n            key={option}\n            className={classnames('tab', {\n              focused: currentMap.option === option,\n            })}\n            onClick={() => handleTabClick(option)}\n          >\n            <h4>\n              {t(option)}\n              {option === MAP_OPTIONS.PER_MILLION && <sup>&dagger;</sup>}\n            </h4>\n          </div>\n        ))}\n      </div>\n\n      <h6 className={classnames('footnote')}>\n        &dagger; {`${t('Based on 2019 population projection by NCP, see ')}`}\n        <a\n          href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n          target=\"_noblank\"\n          style={{color: '#6c757d'}}\n        >\n          {t('source')}\n        </a>\n      </h6>\n*/}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.stateCode, currProps.stateCode)) {\n    return false;\n  } else if (!equal(prevProps.regionHighlighted, currProps.regionHighlighted)) {\n    return false;\n  } else if (!equal(prevProps.mapStatistic, currProps.mapStatistic)) {\n    return false;\n  } else if (!equal(prevProps.anchor, currProps.anchor)) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.data?.TT?.meta?.['last_updated'],\n      currProps.data?.TT?.meta?.['last_updated']\n    )\n  ) {\n    return false;\n  } else if (!equal(prevProps.data?.TT?.total, currProps.data?.TT?.total)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(MapExplorer, isEqual);\n"],"sourceRoot":""}